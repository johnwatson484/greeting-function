# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '968cb95e-9b75-492d-af9e-dfb4f5ed7635'

  # Function app name
  functionAppName: 'GreetingFunction'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'MSBuild'
        projectKey: 'greeting-function'
        projectName: 'greeting-function' 
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))   

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: SonarQubeAnalyze@4
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:

          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: 'Visual Studio Enterprise (7a237616-4441-4449-a16a-38de645918eb)-4924'
              appType: 'functionAppLinux'
              appName: 'GreetingFunction'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'DOCKER|microsoft/azure-functions-dotnet-core2.0:2.0'